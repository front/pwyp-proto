/* Grid settings
========================== */
/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden], template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
  max-width: 100%; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

.section-title {
  font-size: 1em;
  text-transform: uppercase;
  margin-bottom: 10.66656px;
  text-align: center;
  letter-spacing: -.04em;
  font-weight: 600; }
  @media  (min-width: 47em) {
    .section-title {
      font-size: 1.16667em;
      margin-bottom: 16px;
      text-align: left; } }

.container {
  padding-right: 2.94118% !important;
  padding-left: 2.94118% !important; }
  @media  (min-width: 26em) {
    .container {
      max-width: 620px;
      margin-left: auto;
      margin-right: auto; }
      .container:after {
        content: " ";
        display: block;
        clear: both; } }
  @media  (min-width: 660px) {
    .container {
      padding-right: 0 !important;
      padding-left: 0 !important; } }

.grid .grid-item + .grid-item, .grid--three .grid-item + .grid-item, .grid--stack .grid-item + .grid-item, .grid--two-one .grid-item + .grid-item {
  margin-top: 5.88235%; }
  @media  (min-width: 34em) {
    .grid .grid-item + .grid-item, .grid--three .grid-item + .grid-item, .grid--stack .grid-item + .grid-item, .grid--two-one .grid-item + .grid-item {
      margin-top: 2.85714%; } }

/*doc
---
title: Grid three
name: grid-three
category: Container
  - Grid
---

Goes from one `grid-item` on small screens to three `grid-item`'s on larger screens

Class | Description
:-- | :--
`grid--three` | Used on parent element
`grid-item` | Used on each individual child element of `grid--three`

```html_example
<div class="grid--three">
  <div class="grid-item">Grid column 1. Example text to show how the coluns breaks on smaller screens.</div>
  <div class="grid-item">Grid column 2. Example text to show how the coluns breaks on smaller screens.</div>
  <div class="grid-item">Grid column 3. Example text to show how the coluns breaks on smaller screens.</div>
</div>

```
*/
@media  (min-width: 26em) and (max-width: 34em) {
  .grid--three .grid-item {
    width: 64.70588%;
    float: left;
    margin-right: 5.88235%;
    margin-left: 17.64706%; } }
@media  (min-width: 34em) {
  .grid--three .grid-item {
    width: 31.42857%;
    float: left;
    margin-right: 2.85714%;
    margin-top: 0 !important; }
    .grid--three .grid-item:nth-child(3) {
      float: right;
      margin-right: 0; } }

@media  (min-width: 26em) {
  .grid--two-one .grid-item + .grid-item {
    margin-top: 0; } }
@media  (min-width: 26em) {
  .grid--two-one .grid-item:first-child {
    width: 64.70588%;
    float: left;
    margin-right: 5.88235%; } }
@media  (min-width: 34em) {
  .grid--two-one .grid-item:first-child {
    width: 57.14286%;
    float: left;
    margin-right: 2.85714%; } }
@media  (min-width: 26em) {
  .grid--two-one .grid-item:last-child {
    width: 29.41176%;
    float: right;
    margin-right: 0; } }
@media  (min-width: 34em) {
  .grid--two-one .grid-item:last-child {
    width: 40%;
    float: right;
    margin-right: 0; } }

.gallery .grid-item, .gallery--four .grid-item, .gallery--six .grid-item {
  margin-bottom: 2.85714%; }

@media  (min-width: 16em) {
  .gallery--four .grid-item {
    width: 47.05882%;
    float: left; }
    .gallery--four .grid-item:nth-child(2n+1) {
      margin-left: 0;
      margin-right: -100%;
      clear: both;
      margin-left: 0; }
    .gallery--four .grid-item:nth-child(2n+2) {
      margin-left: 52.94118%;
      margin-right: -100%;
      clear: none; } }
@media  (min-width: 34em) {
  .gallery--four .grid-item {
    width: 22.85714%;
    float: left; }
    .gallery--four .grid-item:nth-child(4n+1) {
      margin-left: 0;
      margin-right: -100%;
      clear: both;
      margin-left: 0; }
    .gallery--four .grid-item:nth-child(4n+2) {
      margin-left: 25.71429%;
      margin-right: -100%;
      clear: none; }
    .gallery--four .grid-item:nth-child(4n+3) {
      margin-left: 51.42857%;
      margin-right: -100%;
      clear: none; }
    .gallery--four .grid-item:nth-child(4n+4) {
      margin-left: 77.14286%;
      margin-right: -100%;
      clear: none; } }

@media  (min-width: 16em) {
  .gallery--six .grid-item {
    width: 47.05882%;
    float: left; }
    .gallery--six .grid-item:nth-child(2n+1) {
      margin-left: 0;
      margin-right: -100%;
      clear: both;
      margin-left: 0; }
    .gallery--six .grid-item:nth-child(2n+2) {
      margin-left: 52.94118%;
      margin-right: -100%;
      clear: none; } }
@media  (min-width: 26em) {
  .gallery--six .grid-item {
    width: 29.41176%;
    float: left; }
    .gallery--six .grid-item:nth-child(3n+1) {
      margin-left: 0;
      margin-right: -100%;
      clear: both;
      margin-left: 0; }
    .gallery--six .grid-item:nth-child(3n+2) {
      margin-left: 35.29412%;
      margin-right: -100%;
      clear: none; }
    .gallery--six .grid-item:nth-child(3n+3) {
      margin-left: 70.58824%;
      margin-right: -100%;
      clear: none; } }
@media  (min-width: 34em) {
  .gallery--six .grid-item {
    width: 14.28571%;
    float: left; }
    .gallery--six .grid-item:nth-child(6n+1) {
      margin-left: 0;
      margin-right: -100%;
      clear: both;
      margin-left: 0; }
    .gallery--six .grid-item:nth-child(6n+2) {
      margin-left: 17.14286%;
      margin-right: -100%;
      clear: none; }
    .gallery--six .grid-item:nth-child(6n+3) {
      margin-left: 34.28571%;
      margin-right: -100%;
      clear: none; }
    .gallery--six .grid-item:nth-child(6n+4) {
      margin-left: 51.42857%;
      margin-right: -100%;
      clear: none; }
    .gallery--six .grid-item:nth-child(6n+5) {
      margin-left: 68.57143%;
      margin-right: -100%;
      clear: none; }
    .gallery--six .grid-item:nth-child(6n+6) {
      margin-left: 85.71429%;
      margin-right: -100%;
      clear: none; } }

/*doc
---
title: Hide elements
name: hide-elements
category: Element
  - Helper class
---

Different ways to hide elements.

```html_example
<a href="" class="visuallyhidden">Example hidden link</a>
<a href="" class="visuallyhidden focusable">Example hidden link</a>
<a href="" class="invisible">Example hidden link</a>
```

Class name | Comment
:---|:---
`visuallyhidden` | Visually hide elements, but have them available for screen readers.
`focusable` | By also adding this, a link would be shown on focus.
`invisible` | Hide visually and from screenreaders, but maintain layout.
*/
.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px; }
  .visuallyhidden.focusable:active, .visuallyhidden.focusable:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto; }

.invisible {
  visibility: hidden; }

/*doc
---
title: Clearfix
name: clearfix
category: Element
  - Helper class
---

`clearfix` can be applied on a container that breaks because of floating elements inside it. 

```html_example
<div class="clearfix" style="border: 1px solid black;">
  <img src="http://placehold.it/200x300" alt="" style="float: right;">
</div>
```
*/
.grid:before, .grid--three:before, .grid--stack:before, .grid--two-one:before, .clearfix:before, .section-row:before, .section-main:before, .teaser--adjacent:before, .signup-newsletter .form:before, .grid:after, .grid--three:after, .grid--stack:after, .grid--two-one:after, .clearfix:after, .section-row:after, .section-main:after, .teaser--adjacent:after, .signup-newsletter .form:after {
  content: " ";
  display: table; }
.grid:after, .grid--three:after, .grid--stack:after, .grid--two-one:after, .clearfix:after, .section-row:after, .section-main:after, .teaser--adjacent:after, .signup-newsletter .form:after {
  clear: both; }

/*doc
---
title: Alignment
name: alignment
category: Element
  - Helper class
---

Description.

```html_example
<p>Example</p>
```
*/
.left {
  text-align: left; }

.center {
  text-align: center; }

.right {
  text-align: right; }

/*doc
---
title: Box display
name: block-display
category: Element
  - Helper class
---

Helper class to change a default inline element to a block element, or the other way arround. Illustrated in the example where a label changes from inline to block when adding the class `block`.

```html_example
<label for="example-inline">Inline label <small>(default)</small></label>
<input type="text" id="example-inline">

<label for="example-block" class="block">Block label</label>
<input type="text" id="example-block">
```

Class name | Comment 
:--- | :---
`block` | Change display to block
`inline` | Change display to inline

*/
.block {
  display: block !important; }

.inline {
  display: inline-block !important; }

/*doc
---
title: Space
name: space
category: Element
  - Helper class
---

Add space to a element. 30px are added on smaller screens and it expands to 60px on larger screens. A background is added in the example to better illustrate the space. 

Class | Description
:--- | :---
`space-top` | Add space on top of a element
`space-top-half` | Add space on top, but half of `space-top`
`space-bottom` | Add space on bottom of a element
`space-bottom-half` | Add half space on bottom of a element
`space-top-bottom` | Add space on top and bottom of a element

```html_example
<div class="container space-top bg-light">
  <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Morbi commodo, ipsum sed pharetra gravida, orci magna rhoncus neque, id pulvinar odio lorem non turpis. Nullam sit amet enim. Suspendisse id velit vitae ligula volutpat condimentum. Aliquam erat volutpat.</p>
</div>  
```
*/
.space-top {
  padding-top: 16px; }
  @media  (min-width: 47em) {
    .space-top {
      padding-top: 32px; } }
.space-top-half {
  padding-top: 8px; }
  @media  (min-width: 47em) {
    .space-top-half {
      padding-top: 16px; } }

.space-bottom {
  padding-bottom: 16px; }
  @media  (min-width: 47em) {
    .space-bottom {
      padding-bottom: 32px; } }
.space-bottom-half {
  padding-bottom: 8px; }
  @media  (min-width: 47em) {
    .space-bottom-half {
      padding-bottom: 16px; } }

.space-top-bottom {
  padding-top: 16px;
  padding-bottom: 16px; }
  @media  (min-width: 47em) {
    .space-top-bottom {
      padding-top: 32px;
      padding-bottom: 32px; } }

/*doc
---
title: No-space
name: no-space
category: Element
  - Helper class
---

Remove space on a element.

Class | Description
:-- | :--
`nospace` | Remove space arround all edges of a element
`nospace-top` | Remove space on top of a element
`nospace-bottom` | Remove space on bottom of a element

*/
.nospace {
  padding: 0 !important; }

.nospace-top {
  padding-top: 0 !important; }

.nospace-bottom {
  padding-bottom: 0 !important; }

.link-block {
  display: block; }

.icon, .list-accordion .title:before {
  font-size: 16px; }

.icon:before, .list-accordion .title:before {
  content: ' ';
  vertical-align: middle;
  display: inline-block;
  background-image: url("../img/sprite/export/sprite.svg");
  background-repeat: no-repeat;
  background-size: 2.125em 4.25em; }

.no-svg .icon:before, .no-svg .list-accordion .title:before, .list-accordion .no-svg .title:before {
  background-image: url("../img/sprite/export/sprite.png"); }

.icon.icon-chevron-circle-right-blue:before, .list-accordion .title:before {
  background-position: -0.3125em -0.3125em;
  width: 1.5em;
  height: 1.5em; }

.icon.icon-chevron-right-blue:before, .list-accordion .icon-chevron-right-blue.title:before {
  background-position: -0.3125em -2.4375em;
  width: 1.5em;
  height: 1.5em; }

.breadcrumb {
  padding: .4375em .875em;
  margin: 0 0 1.125em;
  list-style: none; }
  .breadcrumb li {
    display: inline-block; }
  .breadcrumb .divider {
    padding: 0 0.41667em;
    color: #999; }

.btn, .btn--cta, .signup-newsletter .form .btn {
  border: none;
  padding: .25em 1em;
  display: inline-block; }

.btn--cta, .signup-newsletter .form .btn, .signup-newsletter .form .btn--cta {
  background-color: #229ED0;
  color: #fff; }
  .btn--cta:hover, .signup-newsletter .form .btn:hover, .signup-newsletter .form .btn--cta:hover, .btn--cta:focus, .signup-newsletter .form .btn:focus, .signup-newsletter .form .btn--cta:focus {
    background: #30abdd; }

.logo {
  text-align: center;
  display: block;
  line-height: 70px;
  -webkit-transition: all .2s ease-in-out;
          transition: all .2s ease-in-out; }
  .logo img {
    max-width: 80px;
    max-height: 70px;
    vertical-align: middle; }

a.logo:hover, a.logo:focus {
  -webkit-transform: scale(1.2);
      -ms-transform: scale(1.2);
          transform: scale(1.2); }

.video .title, .video--large .title {
  font-size: 1.16667em;
  font-weight: 600;
  margin: 1em 0 .25em; }
.video .meta, .video--large .meta {
  margin: 0 0 .75em;
  font-size: 0.83333em; }

.video--large {
  text-align: center; }
  .video--large .title, .video--large .desc {
    margin-left: auto;
    margin-right: auto;
    max-width: 90%; }
    @media  (min-width: 34em) {
      .video--large .title, .video--large .desc {
        max-width: 95%; } }
  .video--large .title {
    color: #000;
    font-size: 1.5em;
    margin-top: 1em !important;
    margin-bottom: .25em; }
    @media  (min-width: 34em) {
      .video--large .title {
        font-size: 1.75em; } }
  .video--large .desc {
    font-size: 1em;
    line-height: 1.5; }
    @media  (min-width: 34em) {
      .video--large .desc {
        font-size: 1.16667em; } }
    .video--large .desc p {
      margin-top: 0;
      margin-bottom: .75em; }

.section-row + .section-row, .section-row + .field-type-entityreference, .field-type-entityreference + .section-row, .field-type-entityreference + .field-type-entityreference {
  margin-top: 32px; }
  @media  (min-width: 47em) {
    .section-row + .section-row, .section-row + .field-type-entityreference, .field-type-entityreference + .section-row, .field-type-entityreference + .field-type-entityreference {
      margin-top: 64px; } }

.list-accordion {
  list-style: none;
  padding-left: 0; }
  .list-accordion li {
    list-style: none !important;
    margin-left: 0 !important;
    margin-bottom: 0 !important; }
  .list-accordion > li {
    margin-bottom: 1em !important; }
  .list-accordion ul {
    padding-left: 14.28571%; }
  .list-accordion .title {
    display: block;
    font-size: 1.16667em;
    font-weight: 600; }
    .list-accordion .title:before {
      font-size: 13px;
      margin-top: -2px;
      margin-right: .5em;
      -webkit-transition: all .2s;
              transition: all .2s; }
  .list-accordion .is-open:before {
    -webkit-transform: rotate(90deg);
        -ms-transform: rotate(90deg);
            transform: rotate(90deg); }

.teaser p, .teaser--stack p, .teaser--adjacent p {
  margin: 0 0 .75em; }
.teaser .link-block, .teaser--stack .link-block, .teaser--adjacent .link-block {
  color: inherit;
  text-decoration: none; }
  .teaser .link-block:hover .title, .teaser--stack .link-block:hover .title, .teaser--adjacent .link-block:hover .title, .teaser .link-block:focus .title, .teaser--stack .link-block:focus .title, .teaser--adjacent .link-block:focus .title {
    text-decoration: underline; }
.teaser img, .teaser--stack img, .teaser--adjacent img {
  display: inline-block; }
.teaser .title, .teaser--stack .title, .teaser--adjacent .title {
  font-size: 1.16667em;
  font-weight: 600;
  clear: none;
  margin: 1em 0 .25em; }
  @media  (min-width: 47em) {
    .teaser .title, .teaser--stack .title, .teaser--adjacent .title {
      font-size: 1.5em; } }

@media  (min-width: 34em) {
  .teaser--adjacent img {
    width: 31.42857%;
    float: left;
    margin-right: 2.85714%; } }
.teaser--adjacent .title {
  margin-top: 0; }
@media  (min-width: 34em) {
  .teaser--adjacent .title, .teaser--adjacent .desc {
    margin-left: 34.28571%; } }

.teaser-quote {
  text-align: center; }
  .teaser-quote .link-block {
    color: inherit;
    text-decoration: none; }
    .teaser-quote .link-block:hover .quote p, .teaser-quote .link-block:focus .quote p {
      text-decoration: underline; }
  .teaser-quote .tag {
    color: gray;
    margin: 0 0 .25em;
    text-transform: uppercase;
    font-size: 0.83333em;
    line-height: 1.3; }
  .teaser-quote .quote {
    margin: 0; }
    .teaser-quote .quote p {
      font-size: 1.5em;
      font-family: Georgia, serif;
      font-style: italic;
      line-height: 1.4;
      margin: .25em 0 .75em; }
    .teaser-quote .quote .name {
      font-style: normal; }
      .teaser-quote .quote .name:before {
        content: "- "; }

.hero .title, .hero--img .title, .campaign-sms .title, .hero--video .title {
  font-size: 1.75em;
  font-weight: 600;
  text-align: center;
  margin-top: 32px;
  margin-bottom: 32px;
  clear: none; }
  @media  (min-width: 34em) {
    .hero .title, .hero--img .title, .campaign-sms .title, .hero--video .title {
      font-size: 2em;
      margin-top: 64px;
      margin-bottom: 64px; } }

.hero--img .title, .campaign-sms .title, .hero--video .title {
  margin-top: 8px; }
  @media  (min-width: 34em) {
    .hero--img .title, .campaign-sms .title, .hero--video .title {
      margin-top: 16px;
      margin-bottom: 16px; } }

.hero--img, .campaign-sms {
  position: relative;
  overflow: hidden; }
  @media  (min-width: 34em) {
    .hero--img:before, .campaign-sms:before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      background-color: rgba(0, 0, 0, 0.2);
      z-index: 5; } }
  .hero--img .text-wrap, .campaign-sms .text-wrap {
    position: relative; }
    @media  (min-width: 34em) {
      .hero--img .text-wrap, .campaign-sms .text-wrap {
        z-index: 10;
        padding: 64px 10%;
        color: #fff; } }
  .hero--img .title, .campaign-sms .title {
    color: inherit; }
  @media  (min-width: 34em) {
    .hero--img img, .campaign-sms img {
      position: absolute;
      left: 0;
      top: 0;
      width: 100%; } }

@media  (min-width: 47em) {
  .hero--video .video, .hero--video .video--large {
    width: 40%;
    float: right;
    margin-right: 0;
    margin-top: 16px;
    margin-bottom: 16px; } }
@media  (min-width: 47em) {
  .hero--video .title {
    font-size: 1.75em;
    width: 48.57143%;
    float: left;
    margin-right: 2.85714%; } }

/**
 * Newsletter signup
 */
.signup-newsletter {
  background-color: #1d86b1;
  padding: 16px 8px;
  color: white; }
  #content .signup-newsletter {
    text-align: center; }
    @media  (min-width: 47em) {
      #content .signup-newsletter {
        padding: 32px 15%; } }
  .signup-newsletter .title {
    font-size: 1.75em;
    font-weight: 600;
    margin-top: 0;
    margin: 0;
    color: inherit; }
    @media  (min-width: 47em) {
      .signup-newsletter .title {
        font-size: 1.75em; } }
  .signup-newsletter .desc {
    font-size: 1.16667em;
    line-height: 1.6; }
    .signup-newsletter .desc p {
      margin: 1.2em 0 0; }
    @media  (min-width: 47em) {
      #content .signup-newsletter .desc {
        font-size: 1.16667em; } }
  .signup-newsletter .form {
    margin-top: 1em; }
    .signup-newsletter .form .input, .signup-newsletter .form .btn--cta, .signup-newsletter .form .btn {
      display: block;
      width: 100%;
      height: 30px;
      border-radius: 0; }
    .signup-newsletter .form .input {
      border: none;
      padding-left: 8px; }
      @media  (min-width: 47em) {
        #content .signup-newsletter .form .input {
          width: 70%;
          float: left; } }
    @media  (min-width: 47em) {
      #content .signup-newsletter .form .btn--cta, #content .signup-newsletter .form .btn {
        width: 30%;
        float: left; } }
  .signup-newsletter .note {
    margin: .5em 0 0;
    font-size: 0.83333em;
    color: rgba(255, 255, 255, 0.8); }

.campaign-sms {
  text-align: center; }
  .sidebars .campaign-sms {
    text-align: left; }
  .campaign-sms .title {
    margin-bottom: 0;
    font-weight: 600;
    text-align: inherit; }
    .sidebars .campaign-sms .title {
      font-size: 1.5em; }
  .campaign-sms .note {
    margin: 1em 0 0;
    font-size: 1.16667em; }
    @media  (min-width: 34em) {
      .campaign-sms .note {
        background-color: rgba(0, 0, 0, 0.5);
        display: inline-block;
        padding: .5em 2em; } }


/*# sourceMappingURL=data:application/json;base64, */